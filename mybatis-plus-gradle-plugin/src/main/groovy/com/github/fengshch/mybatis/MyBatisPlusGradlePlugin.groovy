/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package com.github.fengshch.mybatis

import com.github.fengshch.mybatis.config.MyBatisConfig
import com.github.fengshch.mybatis.ext.MyBatisExtension
import com.github.fengshch.mybatis.tasks.MyBatisGenerateTask
import org.gradle.api.Project
import org.gradle.api.Plugin
import org.gradle.api.plugins.JavaBasePlugin
import org.gradle.api.plugins.JavaPlugin
import org.gradle.api.plugins.JavaPluginExtension
import org.gradle.api.tasks.SourceSet
import org.yaml.snakeyaml.Yaml

class MyBatisPlusGradlePlugin implements Plugin<Project> {
    @Override
    void apply(Project project) {
        project.getPlugins().apply(JavaBasePlugin.class)

        MyBatisExtension myBatisExtension = project.getExtensions().create("mybatis", MyBatisExtension.class);

        myBatisExtension.getConfigurations().configureEach { it ->
            configDatasource(project, it)
            createGenerateTask(project, it)
        }


        project.getPlugins().withType(JavaPlugin.class).configureEach(javaPlugin -> {
            JavaPluginExtension extension = project.getExtensions().getByType(JavaPluginExtension.class)
            SourceSet sourceSet = extension.getSourceSets().getByName(SourceSet.MAIN_SOURCE_SET_NAME)
            sourceSet.getJava().setSrcDirs(List.of("src/batis/java", "src/main/java"))
//            sourceSet.getResources().setSrcDirs(List.of("src/mybatis/resources", "src/main/resources"))
        })

    }

    private static createGenerateTask(Project project, MyBatisConfig config) {
        String taskName = "generate" + config.name.capitalize() + "MyBatis"
        if (config.name == "main")
            taskName = "generateMyBatis"

        def mybatis = project.getTasks().register(taskName, MyBatisGenerateTask.class, config)
        mybatis.configure { task ->
            {
                task.group = "mybatis"
                task.description = "Generate mybatis code"
            }
        }
    }

    private static configDatasource(Project project, MyBatisConfig config) {
        String driverClassName
        String url
        String username
        String password

        String name = config.name

        Properties properties = new Properties()

        if (project.file("src/main/resources/mybatis.yml").exists()) {
            def props = new Yaml().load(project.file("src/main/resources/mybatis.yml").newInputStream())

            def mybatis = props["mybatis"][name]
            if (config.name == "main")
                mybatis = props["mybatis"]

            driverClassName = mybatis["datasource"]["driverClassName"]
            url = mybatis["datasource"]["url"]
            username = mybatis["datasource"]["username"]
            password = mybatis["datasource"]["password"]

            config.driverClassName = driverClassName
            config.url = url as String
            config.username = username as String
            config.password = password as String
        } else if (project.file("src/main/resources/mybatis.properties").exists()) {
            String propName = "mybatis.${config.name}.datasource"
            if (config.name == "main") {
                propName = "mybatis.datasource"
            }

            properties.load(project.file("src/main/resources/mybatis.properties").newDataInputStream())

            driverClassName = properties.getProperty(propName + ".driverClassName")
            url = properties.getProperty("${propName}.url") // cfg.spring.datasource.url as String
            username = properties.getProperty(propName + ".username") // cfg.spring.datasource.user as String
            password = properties.getProperty(propName + ".password") //cfg.spring.datasource.password as String

            config.driverClassName = driverClassName
            config.url = url
            config.username = username
            config.password = password
        } else if (project.file("src/main/resources/application.yml").exists()) {
            def props = new Yaml().load(project.file("src/main/resources/application.yml").newInputStream())

            def datasource = props["spring"]["datasource"]

            driverClassName = datasource["driverClassName"]
            if (driverClassName == null)
                driverClassName = datasource["driver-class-name"]

            url = datasource["url"]
            username = datasource["username"]
            password = datasource["password"]

            config.driverClassName = driverClassName
            config.url = url as String
            config.username = username as String
            config.password = password as String
        } else if (project.file("src/main/resources/application.properties").exists()) {

            properties.load(project.file("src/main/resources/application.properties").newDataInputStream())

            String propName = "spring.datasource"
            driverClassName = properties.getProperty(propName + ".driverClassName")
            if (driverClassName == null)
                driverClassName = properties.getProperty(propName + ".driver-class-name")

            url = properties.getProperty(propName + ".url") // cfg.spring.datasource.url as String
            username = properties.getProperty(propName + ".username") // cfg.spring.datasource.user as String
            password = properties.getProperty(propName + ".password") //cfg.spring.datasource.password as String

            config.driverClassName = driverClassName
            config.url = url
            config.username = username
            config.password = password
        }
    }
}